import { noop, Observable } from "rxjs";
export declare type Observables<T extends object, C extends object = {}> = {
    [K in keyof T]: T[K] extends (...args: infer U) => any ? Observable<U> : Observable<T[K]>;
} & {
    [K in keyof C]: C[K] extends (...args: infer U) => any ? Observable<U> : Observable<C[K]>;
};
export declare function observe<T extends object, C extends object>(instance: T, callbacks?: C): {
    observables: Observables<T, C>;
    proxy: T & C;
};
export declare function callback<T = typeof noop>(): T;
