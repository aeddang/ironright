import { BehaviorSubject, noop, Subject } from "rxjs";
export function observe(instance, callbacks) {
    var defaultedCallbacks = callbacks || {};
    var subjects = new Map();
    var proxy = new Proxy(instance, {
        get: function (target, name) {
            var callbacksValue = defaultedCallbacks[name];
            var targetValue = target[name];
            var value = callbacksValue && !targetValue ? callbacksValue : targetValue;
            if (typeof value === "function") {
                var functionValue_1 = value;
                value = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var result = functionValue_1.apply(this, args);
                    var subject = subjects.get(name);
                    if (subject) {
                        subject.next(args);
                    }
                    return result;
                };
            }
            return value;
        },
        getOwnPropertyDescriptor: function (target, name) {
            return (Object.getOwnPropertyDescriptor(target, name) ||
                Object.getOwnPropertyDescriptor(defaultedCallbacks, name));
        },
        has: function (target, name) {
            return name in target || name in defaultedCallbacks;
        },
        ownKeys: function (target) {
            return Reflect.ownKeys(target).concat(Reflect.ownKeys(defaultedCallbacks));
        },
        set: function (target, name, value) {
            target[name] = value;
            var subject = subjects.get(name);
            if (subject) {
                subject.next(value);
            }
            return true;
        }
    });
    return {
        observables: new Proxy({}, {
            get: function (target, name) {
                var subject = subjects.get(name);
                if (!subject) {
                    subject =
                        typeof instance[name] === "function" ||
                            typeof defaultedCallbacks[name] === "function"
                            ? new Subject()
                            : new BehaviorSubject(instance[name]);
                    subjects.set(name, subject);
                }
                return subject.asObservable();
            }
        }),
        proxy: proxy
    };
}
export function callback() {
    return noop;
}
